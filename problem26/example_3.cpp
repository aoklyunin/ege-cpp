#include <iostream>
#include <fstream>
#include <set>
#include <vector>
#include <algorithm>

// главный метод программы
int main() {
    // открываем файл
    std::ifstream myfile;
    // бинарник собирается в отдельной папке, поэтому относительный путь такой
    // можно вместо этого закинуть файл куда-нибудь на диск и указать полный путь
    myfile.open("../problem26/26-57.txt");
    // список длин кусков
    std::vector<int> lst;

    // получаем кол-во кусков
    int n;
    myfile >> n;
    // получаем требуемую длину
    int m;
    myfile >> m;
    // читаем длины кусков кабеля
    for (int i = 0; i < n; i++) {
        // получаем значение
        int w;
        myfile >> w;
        // добавляем его в множество
        lst.push_back(w);
    }

    // сортируем список
    std::sort(lst.begin(), lst.end());

    // кол-во сварок
    int sCnt = 0;
    // кол-во оставшихся кусков
    int rCnt = 0;
    // пока в множестве есть элементы
    while (!lst.empty()) {
        // сумма длин для нового блока
        int sum = 0;
        // кол-во использованных блоков
        int eCnt = 0;
        // пока суммарная длина меньше заданной и есть элементы в множестве
        while (sum < m && !lst.empty()) {
            // получаем самый большой элемент множества, т.е. берём
            // кусок кабеля самой большой длины
            int e = lst[lst.size()-1];
            // убираем последний элемент
            lst.pop_back();
            // добавляем его к суммарной длине
            sum += e;
            // увеличиваем кол-во взятых кусков на 1
            eCnt++;
        }
        // если в итоге сумма меньше требуемой длины,
        // значит, куски кабеля кончились, при этом их количество лежит в eCnt
        if (sum < m) {
            // просто сохраняем оставшееся количество
            rCnt = eCnt;
            // завершаем цикл
            break;
        } else { // если суммарная длина больше или равна требуемой
            // получаем длину остатка
            int nE = sum - m;
            // добавляем его в множество
            lst.push_back(nE);
            // сортируем список
            std::sort(lst.begin(), lst.end());
            // прибавляем к количеству сварок число сварок для этого блока
            // она на 1 меньшее числа кусков, ведь в сварке всегда участвует два блока
            sCnt += eCnt - 1;
        }
    }

    // выводим максимальное количество
    std::cout << sCnt << " " << rCnt << std::endl;

    return 0;
}


