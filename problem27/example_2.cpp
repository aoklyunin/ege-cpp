#include <iostream>
#include <fstream>
#include <algorithm>

// главный метод программы
int main() {

    // открываем файл
    std::ifstream myfile;
    // бинарник собирается в отдельной папке, поэтому относительный путь такой
    // можно вместо этого закинуть файл куда-нибудь на диск и указать полный путь
    myfile.open("../problem27/27-1a.txt");

    // читаем кол-во
    int n;
    myfile >> n;
    // создаём массив для подсчёта подмножеств, сумма которых имеет тот
    // или иной остаток от деления на 12
    long d[12];

    // читаем сами числа
    for (int i = 0; i < n; i++) {
        // читаем число
        int v;
        myfile >> v;
        long  dc[12];
        std::copy(std::begin(d), std::end(d), std::begin(dc));

        // Перебираем элементы нового массива остатков, т.к.
        // мы должны взять каждый из элементов массива остатков.
        // Кол-во чисел в нём говорит о том, сколько подмножеств имеют остаток
        // от деления суммы своих элементов. новый элемент мы можем добавить к любому
        // из подмножеств. Чтобы получить индекс полученного элемента, мы
        // просто находим остаток от деления суммы текущего остатка, равного i и
        // прочитанного числа. При этом т.к. мы могли взять любое из подмножеств с заданным остатком,
        // то надо прибавить кол-во этих множеств. Если мы не сделаем копию
        // массива, то часть остатков будет использовать уже изменённую сумму
        for (int j = 0; j < 12; j++) {
            dc[(v + j) % 12] += d[j];
        }
        // также необходимо увеличить на 1 кол-во подмножеств, сумма элементов которых
        // будет иметь такой же остаток, как прочитанное число. Здесь мы
        // рассматриваем случай, когда новое подмножество состоит только из прочитанного элемента
        dc[v % 12] += 1;
        // заменяем массив
        std::copy(std::begin(dc), std::end(dc), std::begin(d));
    }
    // закрываем файл
    myfile.close();
    // выводим кол-во подмножеств, имеющих сумму, делящуюся на 12, т.е имеющую
    // остаток 0
    std::cout << d[0] << std::endl;
    return 0;
}


